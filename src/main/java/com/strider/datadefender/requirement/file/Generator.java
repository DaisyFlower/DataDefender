/*
 * Copyright 2014, Armenak Grigoryan, Matthew Eaton, and individual contributors as indicated
 * by the @authors tag. See the copyright.txt in the distribution for a
 * full listing of individual contributors.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 */
package com.strider.datadefender.requirement.file;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.stream.Collectors;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;

import static javax.xml.bind.JAXBContext.newInstance;

import com.strider.datadefender.database.DatabaseException;
import com.strider.datadefender.database.metadata.TableMetaData;
import com.strider.datadefender.database.metadata.TableMetaData.ColumnMetaData;
import com.strider.datadefender.requirement.Column;
import com.strider.datadefender.requirement.Key;
import com.strider.datadefender.requirement.Argument;
import com.strider.datadefender.requirement.Function;
import com.strider.datadefender.requirement.FunctionList;
import com.strider.datadefender.requirement.Requirement;
import com.strider.datadefender.requirement.Table;

import lombok.extern.log4j.Log4j2;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;

/**
 * Utility class to help handling requirement objects
 * @author Matthew Eaton
 */
@Log4j2
public class Generator {

    // Hard-coded default params for now.
    private static void addDefaultParam(final String table, final Column column) {
        final FunctionList fl = new FunctionList();
        final Function fn = new Function("com.strider.datadefender.anonymizer.functions.Core#randomStringFromFile", false);
        final Argument arg  = new Argument();

        arg.setName("file");
        arg.setValue(table + "_" + column.getName() + ".txt");
        arg.setType(String.class);

        fn.setArguments(List.of(arg));
        fl.setFunctions(List.of(fn));
        column.setFunctionList(fl);
    }

    /**
     * Create a requirement from sorted (by (schema.)table) List of matching columns.
     * @param matches
     * @return
     */
    public static Requirement create(final List<TableMetaData> matches) {

        List<Table> tables = new ArrayList<>();

        for (final TableMetaData match : matches) {
            Table table = new Table(match.getCanonicalTableName());
            final List<ColumnMetaData> pks = match.getPrimaryKeys();
            if (pks.size() == 1) {    // only one pk
                table.setPkey(pks.get(0).getColumnName());
            } else {                  // multiple key pk
                final List<Key> keys = pks.stream().map(col -> new Key(col.getColumnName())).collect(Collectors.toList());
                table.setPrimaryKeys(keys);
            }

            final List<Column> columns = new ArrayList<>();
            for (final ColumnMetaData cmatch : match.getColumns()) {
                final Column column = new Column();
                column.setName(cmatch.getColumnName());
                column.setType(cmatch.getColumnType());

                addDefaultParam(table.getName(), column);
                columns.add(column);
            }
            table.setColumns(columns);
            tables.add(table);
        }

        final Requirement req = new Requirement();

        req.setClient("Autogenerated Template Client");
        req.setVersion("2.0");    // hopefully order of tables doesn't matter
        req.setTables(tables);

        return req;
    }

    /**
     * Write requirement to file.
     * @param requirement
     * @param fileName
     * @throws DatabaseException
     */
    public static void write(final Requirement requirement, final String fileName) throws DatabaseException, JAXBException {
        log.info("Requirement.write() to file: " + fileName);

        final File outFile = new File(fileName);
        final JAXBContext jc = newInstance(Requirement.class);
        final Marshaller  marshaller = jc.createMarshaller();

        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
        marshaller.marshal(requirement, outFile);
    }

    /**
     * Returns argument of name "file" if exists else returns null
     * @param arguments List of function arguments
     * @return File parameter object
     */
    public static Argument getFileParameter(final List<Argument> arguments) {
        return CollectionUtils
            .emptyIfNull(arguments)
            .stream()
            .filter((a) -> StringUtils.equals(a.getName(), "file"))
            .findAny()
            .orElse(null);
    }
}
